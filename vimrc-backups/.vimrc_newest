set nocompatible
filetype off
set rtp+=~/.vim/autoload/plug.vim
call plug#begin()
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Yggdroot/indentLine'
Plug 'thaerkh/vim-workspace'
Plug 'wellle/visual-split.vim'
"Plug 'mattboehm/vim-accordian'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'jiangmiao/auto-pairs'
"Plug 'chiel192/vim-autoformat'
"Plug 'hdima/python-syntax'
"Plug 'scrooloose/syntastic'
Plug 'townk/vim-autoclose'
Plug 'itchyny/lightline.vim'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/gv.vim'
Plug 'jreybert/vimagit'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'thinca/vim-quickrun'
Plug 'matze/vim-move'
Plug 'mbbill/undotree'
Plug 'flazz/vim-colorschemes'
"Plug 'nathanaelkane/vim-indent-guides'
Plug 'frazrepo/vim-rainbow'
"Plug 'mgee/lightline-bufferline'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'dense-analysis/ale'
Plug 'maximbaz/lightline-ale'
"Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-github-dashboard'
Plug 'tpope/vim-eunuch'
"Plug 'vim-python/python-syntax'
"Plug 'majutsushi/tagbar'
"Plug 'prettier/vim-prettier'
"Plug 'fs111/pydoc.vim'
Plug 'klen/python-mode'
"Plug 'exvim/ex-searchcompl'
Plug 'tpope/vim-surround'
Plug 'nvie/vim-togglemouse'
"Plug 'google/vim-codefmt'
Plug 'tell-k/vim-autopep8'
" Always load this last
Plug 'ryanoasis/vim-devicons'
call plug#end()
filetype plugin on
filetype plugin indent on

set encoding=UTF-8
scriptencoding utf-8
setglobal fileencoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

set mouse=a
set autoread
set cmdheight=4
set number
set wrap
set textwidth=150
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set copyindent
set smartindent
set smarttab
set noexpandtab
set showmode

set nobackup
set noswapfile
set nowb

set showcmd

set incsearch
set hlsearch
set smartcase
set ignorecase

set esckeys
set foldenable
set ttyfast
set scrolloff=5
set title
set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:.
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·

syntax on
"colorscheme ir_black
set background=dark

set history=999
set undolevels=999

"set wildmenu " tab completion
"set wildmode=longest:full,list " tab completion
"set wildignore+=*.o,*~,*.pyc,tags
" ignore files in tmp directories
"set wildignore+=*/tmp/*
" ignore files in target directories
"set wildignore+=*/target/*
"set wildignore+=*.o
"set wildignore+=*.class
"set wildignore+=*.swp
"set wildignore+=*.pyc
"set wildignore+=*/.git/*

set clipboard = unnamed
set nomodeline
set showmatch
set backspace=2
set backspace=indent,eol,start
set laststatus=2
set noerrorbells
set visualbell
set t_vb=
set mousehide
set showbreak=>\
set hidden
set shortmess=fotxI

if !has('gui_running')
    set t_Co=256
endif

if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
set undofile
endif

cmap w!! w !sudo tee % >/dev/null

let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
lef g:NERDTrimTrailingWhitespace = 1


autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

autocmd VimEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <F2> :NERDTreeToggle<CR>

"let g:nerdtree_tabs_open_on_gui_startup = 0
"let g:nerdtree_tabs_open_on_new_tab = 0
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
"let g:NERDTreeShowFiles = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeMouseMode = 2
let g:NERDTreeIgnore = [ '\.pyc$', '\.pyo$', '\.py\$class', '\.obj$', '\.so$', '\.egg$', '^\.git$', '__pycache__'. '\.DS_Store' ]

let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1

let g:lightline#bufferline#enable_devicons = 1
let g:rainbow_active = 1

"let g:indentLine_color_term = 255
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

"if has('autocmd')
    "augroup AutoCommandsGroup
        "autocmd!
        " Return to last edit position when opening files
        "autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    "augroup END
"endif

fun! <SID>StripTrailingWhitespaces()
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    call cursor(l,c)
endfun

"autocmd FileType c,cpp,java,python,md,js,html,css,javascript,php,sh autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

"set statusline=%<\ %f\ %m%r%y%w%=%l\/%-6L\ %3C\

let g:ale_completion_enabled = 0
"let g:ale_lint_delay = 500
let g:ale_lint_on_filetype_changed = 0
let g:ale_sign_column_always = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_list_window_size = 5
"let g:ale_open_list = 1
"let g:ale_keep_list_window_open = 1

let g:lightline = {}

let g:lightline.component_expand = {
  \ 'linter_checking': 'lightline#ale#checking',
  \ 'linter_infos': 'lightline#ale#info',
  \ 'linter_warnings': 'lightline#ale#warnings',
  \ 'linter_errors': 'lightline#ale#errors',
  \ 'linter_ok': 'lightline#ale#ok',
  \ }

let g:lightline.component_type = {
  \ 'linter_checking': 'right',
  \ 'linter_infos': 'right',
  \ 'linter_warnings': 'warning',
  \ 'linter_errors': 'error',
  \ 'linter_ok': 'right',
  \ }

let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infors', 'linter_ok' ]] }

"let g:lightline#ale#indicator_checking = "\uf110"
"let g:lightline#ale#indicator_infos = "\uf129"
"let g:lightline#ale#indicator_warnings = "\uf071"
"let g:lightline#ale#indicator_errors = "\uf05e"
"let g:lightline#ale#indicator_ok = "\uf00c"


"let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d%s %C(black)%C(bold)%cr"'

"fun! s:fzf_statusline()
    "highlight fzf1 ctermfg=161 ctermbg=251
    "highlight fzf2 ctermfg=23 ctermbg=251
    "highlight fzf3 ctermfg=237 ctermbg=251
    "setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
"endfun

"autocmd! User FzfStatusLine call <SID>fzf_statusline()

" disable continuation of comments to the next line
"autocmd BufNewFile,BufRead * setlocal formatoptions-=cro


augroup vimrc_file_type_indentation
    au!
    autocmd FileType python setlocal shiftwidth=2 tabstop=2 expandtab
    autocmd FileType vim setlocal shiftwidth=2 tabstop=2 expandtab
    autocmd FileType sh setlocal shiftwidth=2 tabstop=2 expandtab
    autocmd FileType c setlocal shiftwidth=4 tabstop=4 expandtab
    autocmd FileType c++ setlocal shiftwidth=4 tabstop=4 expandtab
    autocmd FileType java setlocal shiftwidth=4 tabstop=4 expandtab
augroup end

" python mode configurations
"autocmd BufRead *.py setlocal colorcolumn = 0
let g:pymode_options_colorcolumn = 0
let g:pymode = 1
let g:pymode_python = 'python3'
let g:pymode_breakpoint = 0
let g:pymode_doc = 0
let g:pymode_folding = 0
let g:pymode_indent = 1
let g:pymode_line = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8']
let g:pymode_lint_cwindow = 1
let g:pymode_lint_ignore = ''
let g:pymode_lint_message = 1
let g:pymode_lint_on_fly = 0
let g:pymode_lint_on_write = 0
let g:pymode_lint_select = ''
let g:pymode_lint_signs = 1
let g:pymode_motion = 0
let g:pymode_options = 0
let g:pymode_paths = []
let g:pymode_quickfix_maxheight = 6
let g:pymode_quickfix_minheight = 3
let g:pymode_rope = 1
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_rope_auto_project = 0
let g:pymode_rope_enable_autoimport = 0
let g:pymode_rope_autoimport_generate = 0
let g:pymode_rope_guess_project = 0
let g:pymode_rope_regnerate_on_write = 0
let g:pymode_run = 0
let g:pymode_trim_whitespaces = 0

" syntax highlight
let g:pymode_syntax = 1
let g:pymode_syntax_slow_sync = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_print_as_function = g:pymode_syntax_all
let g:pymode_syntax_highlight_async_await = g:pymode_syntax_all
let g:pymode_syntax_highlight_equal_operator = g:pymode_syntax_all
let g:pymode_syntax_highlight_stars_operator = g:pymode_syntax_all
let g:pymode_syntax_highlight_self = g:pymode_syntax_all
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_string_formatting = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
let g:pymode_syntax_string_format = g:pymode_syntax_all
let g:pymode_syntax_string_templates = g:pymode_syntax_all
let g:pymode_syntax_doctests = g:pymode_syntax_all
let g:pymode_syntax_builtin_objs = g:pymode_syntax_all
let g:pymode_syntax_builtin_types = g:pymode_syntax_all
let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all
let g:pymode_syntax_docstrings = g:pymode_syntax_all

let g:autopep8_max_line_length = 100
let g:autopep8_indent_size = 2
let g:autopep8_on_save = 1

let g:gitgutter_enabled = 1
