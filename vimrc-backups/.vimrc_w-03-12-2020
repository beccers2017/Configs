set nocompatible
filetype off
set rtp+=~/.vim/autoload/plug.vim
call plug#begin()
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'Yggdroot/indentLine'
"Plug 'thaerkh/vim-workspace'
"Plug 'wellle/visual-split.vim'
"Plug 'mattboehm/vim-accordian'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'jiangmiao/auto-pairs'
"Plug 'chiel192/vim-autoformat'
"Plug 'hdima/python-syntax'
"Plug 'scrooloose/syntastic'
Plug 'townk/vim-autoclose'
Plug 'itchyny/lightline.vim'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tpope/vim-fugitive'
"Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'
Plug 'xuyuanp/nerdtree-git-plugin'
"Plug 'junegunn/gv.vim'
"Plug 'jreybert/vimagit'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'thinca/vim-quickrun'
Plug 'matze/vim-move'
Plug 'mbbill/undotree'
Plug 'flazz/vim-colorschemes'
"Plug 'nathanaelkane/vim-indent-guides'
Plug 'frazrepo/vim-rainbow'
"Plug 'mgee/lightline-bufferline'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'dense-analysis/ale'
Plug 'maximbaz/lightline-ale'
Plug 'junegunn/vim-github-dashboard'
Plug 'tpope/vim-eunuch'
"Plug 'vim-python/python-syntax'
"Plug 'jeetsukumaran/vim-pythonsense'
"Class/module browser
Plug 'majutsushi/tagbar'
"Plug 'prettier/vim-prettier'
"Plug 'fs111/pydoc.vim'
Plug 'klen/python-mode'
Plug 'tpope/vim-surround'
Plug 'nvie/vim-togglemouse'
Plug 'ahonn/vim-fileheader'
"Plug 'manasthakur/vimsessionist'
"Plug 'tpope/vim-flagship'
"Plug 'valloric/youcompleteme'
"Plug 'vim-scripts/javacomplete'
"Plug 'google/vim-codefmt'
"Plug 'tell-k/vim-autopep8'
Plug 'itchyny/vim-gitbranch'
Plug 'yegappan/grep'
Plug 'rhysd/git-messenger.vim'
"Plug 'zivyangll/git-blame.vim'
Plug 'niklaas/lightline-gitdiff'
"Plug 'luxflux/vim-git-inline-diff'
"Plug 'llvm-mirror/clang'
"Plug 'albfan/vim-git-graph'
"Plug 'albfan/AnsiEsc.vim'
"Plug 'kstep/gitgraph-vim-plugin'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-scripts/commentToggle'
"Plug 'kien/ctrlp.vim'
"Plug 'bronson/vim-trailing-whitespaces'
"Plug 'vim-scripts/c.vim'
"Plug 'kevinw/pyflakes-vim'
"Plug 'vim-scripts/Vim-Support'
"Plug 'luchermitte/lh-cpp'
"Plug 'cquery-project/cquery'
"Plug 'shaneharper/vim-rtags'
"Plug 'godlygeek/tabular'
"Plug 'ervandew/supertab'
"Plug 'SirVer/utilsnips'
"Plug 'terryma/vim-smooth-scroll'
"Plug 'Shougo/vimfiler.vim'
"Plug 'mhinz/vim-startify'
Plug 'machakann/vim-highlightedyank'
"Plug 'JBakamovic/cxxd-vim'
Plug 'tibabit/vim-templates'
Plug 'Akin909/lightline-statuslinetabs'
"Plug 'mkalinski/vim-lightline_tagbar'
"Plug 'xolox/vim-misc'
Plug 'vimwiki/vimwiki'
Plug 'cometsong/CommentFrame.vim'
"Plug 'RRethy/vim-illuminate'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
"Plug 'yuttie/comfortable-motion.vim'
"Plug 'decayofmind/vim-lightline-functions'
"Plug 'APZelos/gitline.vim'
"Plug 'psf/black'
Plug 'rbgrouleff/bclose.vim'
"Plug 'haya14busa/vim-cool'
"Plug 'romainl/vim-cool'
"Plug 'spolu/dwm.vim' "Tiled window management
"Plug 'artur-shaik/vim-javacomplete2'
Plug 'severin-lemaignan/vim-minimap'
"Plug 'jistr/vim-nerdtree-tabs'
"Plug 'wsdjeg/vim-todo'
"Plug 'sjl/gundo.vim'
"Plug 'dyng/ctrlsf.vim'
"Tab list panel
"Plug 'kien/tabman.vim'

" Always load this last
Plug 'ryanoasis/vim-devicons'
call plug#end()
filetype plugin on
filetype plugin indent on

set encoding=UTF-8
scriptencoding utf-8
setglobal fileencoding=utf-8

" Use Unix as the standard file type
set fileformats=unix,dos,mac
set formatoptions+=1 "when wrapping paragraphs, don't end lines with 1-letter words

set mouse=a
"set virtualedit=all "allow cursor to go in to invalid places
set autoread
set updatetime=100

set cmdheight=4
set number
set wrap
set textwidth=150
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround " use multiple of shiftwidth when indenting with '<' and '>'
set autoindent
set copyindent
set smartindent
set smarttab
set noexpandtab
set showmode

set nobackup
set noswapfile
set nowb

" display incomplete commands
set showcmd

set incsearch
set hlsearch
set smartcase
set ignorecase

set esckeys
set foldenable
" more characters will be sent to the screen for redrawing
set ttyfast
set scrolloff=5
set title
set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:.
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·

syntax on
"colorschemes: ron, pablo, koehler, slate, Black, darkrobot, DarkDefault, deep-space, developer, ir_black, neverland-darker, PerfectDark, rdark,
"vividchalk
"colorscheme ir_black
set background=dark

set history=999
set undolevels=999

" time waited for key press(es) to complete
set timeout timeoutlen=1000 ttimeoutlen=50

set lazyredraw

set wildmenu " tab completion
set wildmode=longest:full,list " tab completion
"set wildchar=<Tab>
set wildignore+=*.o,*~,*.pyc,tags
" ignore files in tmp directories
set wildignore+=*/tmp/*
"ignore files in target directories
set wildignore+=*/target/*
set wildignore+=*.class
set wildignore+=*.swp
set wildignore+=*/.git/*
set wildignore+=*.swo
set wildignore+=*.so
set wildignore+=*.a
set wildignore+=*.obj
set wildignore+=*.exe
set wildignore+=*.dll
set wildignore+=*.manifest
set wildignore+=eggs/**
set wildignore+=*.egg-info/**
set wildignore+=.git

set clipboard+=unnamedplus
set nomodeline " For security purposes
set showmatch
set backspace=2
set backspace=indent,eol,start
set laststatus=2
set noerrorbells
set visualbell
set t_vb=
set mousehide
set showbreak=>\
" hide buffers instead of closing them even if they contain unwritten changes
set hidden
set shortmess=fotxI

set directory=~/.vim/.tmp,~/tmp,/tmp
set viminfo='20,\"80 "read/write a .viminfo file, don't store more

if !has('gui_running')
  set t_Co=256
endif

if has('persistent_undo')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
set undofile
endif

" Save as sudo when not opened as sudo
cmap w!! w !sudo tee % > /dev/null

"NERDCommenter Stuff
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
lef g:NERDTrimTrailingWhitespace = 1
let g:NERDDefaultAlign = 'none'
let g:NERDDefaultNesting = 0
let g:NERDAltDelims_python = 1

"NERDTree Stuff
autocmd vimenter * NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif
map <F2> :NERDTreeToggle<CR>

"let g:NERDTreeWinSize=80
let g:NERDTreeQuitOnOpen = 0
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1
let g:NERDTreeHighlightCursorLine = 0
let g:NERDTreeMinimalUI = 1
let g:loaded_nerdtree_exec_menuitem = 0
let g:NERDTreeStatusline = -1
"let g:NERDTreeShowFiles = 1
"let g:NERDTreeShowHidden = 1
let g:NERDTreeMouseMode = 2
let g:NERDTreeIgnore = [ '\.pyc$', '\.pyo$', '\.py\$class', '\.obj$', '\.so$', '\.egg$', '^\.git$', '__pycache__'. '\.DS_Store' ]

"Devicons Stuff
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
"let g:DevIconsEnableFolderOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1
let g:WebDevIconsUnicodeDecorateFolderNodesExactMatches = 1
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1

let g:lightline#bufferline#enable_devicons = 1
let g:rainbow_active = 1

let g:indentLine_char_list = ['|', '¦', '┆', '┊']

if has('autocmd')
    augroup AutoCommandsGroup
        autocmd!
        "Return to last edit position when opening files
        autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    augroup END
endif

fun! <SID>StripTrailingWhitespaces()
    let l = line('.')
    let c = col('.')
    %s/\s\+$//e
    call cursor(l,c)
endfun

"autocmd FileType c,cpp,java,python,md,js,html,css,javascript,php,sh autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

"Ale Stuff
let g:ale_enabled = 1
let g:ale_completion_enabled = 0
let g:ale_lint_on_filetype_changed = 0
let g:ale_sign_column_always = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_info_str = 'Info'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 0
let g:ale_hover_to_preview = 1
let g:ale_list_window_size = 5
"let g:ale_linters = ['pylint']
let g:ale_python_pylint_executable = 'python3'
let g:ale_python_pylint_options = '--rcfile ~/.pylintrc'
let g:ale_python_pylint_use_global = 0
let g:ale_python_pylint_use_msg_id = 0
"let g:ale_open_list = 1
let g:ale_keep_list_window_open = 1
let g:ale_fixers = {
	\ '*': ['remove_trailing_lines', 'trim_whitespace'],
	\}
"let g:ale_python_black_executable
"let g:ale_vim_vint_show_style_issues = 1

map <F3> :ALELint<CR>
map <F4> :ALEToogle<CR>

"let g:lightline = {}

"let g:lightline.component_expand = {
  "\ 'linter_checking': 'lightline#ale#checking',
  "\ 'linter_infos': 'lightline#ale#info',
  "\ 'linter_warnings': 'lightline#ale#warnings',
  "\ 'linter_errors': 'lightline#ale#errors',
  "\ 'linter_ok': 'lightline#ale#ok',
  "\ }

"let g:lightline.component_type = {
  "\ 'linter_checking': 'right',
  "\ 'linter_infos': 'right',
  "\ 'linter_warnings': 'warning',
  "\ 'linter_errors': 'error',
  "\ 'linter_ok': 'right',
  "\ }

"let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infors', 'linter_ok' ]] }


let g:lightline = {
	\ 'active': {
		\ 'left': [['mode', 'paste' ], ['gitbranch', 'readonly', 'buffers']],
		\ 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok', 'lineinfo'], ['percent'], ['fileformat','fileencoding', 'filetype']],
	\},
	\ 'component_expand': {
		\ 'linter_checking': 'lightline#ale#checking',
		\ 'linter_infos': 'lightline#ale#infos',
		\ 'linter_warnings': 'lightline#ale#warnings',
		\ 'linter_errors': 'lightline#ale#errors',
		\ 'linter_ok': 'lightline#ale#ok',
		\ 'buffers': 'lightline#bufferline#buffers',
\ },
	\ 'component_type': {
		\ 'linter_checking': 'right',
		\ 'linter_infos': 'right',
		\ 'linter_warnings': 'warning',
		\ 'linter_errors': 'error',
		\ 'linter_ok': 'right',
		\ 'buffers': 'tabsel',
	\},
\ 'component_function': {
\ 'gitbranch': 'GitInfo',
		\ 'filetype': 'MyFiletype',
		\ 'fileformat': 'MyFileFormat',
	\},
\}

function! MyFiletype()
	"return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
"return winwidth(0) > 70 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol(): '') : ''
	return winwidth(0) > 70
endfunction

function! MyFileformat()
	return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! GitInfo()
	let git = fugitive#head()
	if git != ''
return ' '.fugitive#head()
	else
		return ''
endfunction

let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"

" disable continuation of comments to the next line
"autocmd BufNewFile,BufRead * setlocal formatoptions-=cro

" Disable automatic commenting on newline
augroup commenting
	au!
	au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END

set splitbelow splitright

augroup files
	au!
	au BufRead,BufNewFile *.h set filetype=c
augroup END

"let g:github_dashboard = { 'username': 'e389034' }

augroup vimrc_file_type_indentation
	au!
	autocmd FileType python setlocal shiftwidth=2 tabstop=2
	autocmd FileType vim setlocal shiftwidth=2 tabstop=2
	autocmd FileType sh setlocal shiftwidth=2 tabstop=2
	autocmd FileType c setlocal shiftwidth=4 tabstop=4
	autocmd FileType cpp setlocal shiftwidth=4 tabstop=4
	autocmd FileType java setlocal shiftwidth=4 tabstop=4
augroup END

" python mode configurations
"autocmd BufRead *.py setlocal colorcolumn = 0
let g:pymode_options_colorcolumn = 0
let g:pymode = 1
let g:pymode_python = 'python3'
let g:pymode_breakpoint = 0
let g:pymode_doc = 0
let g:pymode_folding = 0
let g:pymode_indent = 1
let g:pymode_line = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'pylint']
let g:pymode_lint = 1
let g:pymode_lint_on_write = 0
let g:pymode_lint_unmodified = 0
let g:pymode_lint_cwindow = 1
let g:pymode_lint_ignore = 'C0103,W'
let g:pymode_lint_message = 1
let g:pymode_lint_on_fly = 0
let g:pymode_lint_select = ''
let g:pymode_lint_signs = 1
let g:pymode_motion = 0
let g:pymode_options = 0
let g:pymode_paths = []
let g:pymode_quickfix_maxheight = 6
let g:pymode_quickfix_minheight = 3
let g:pymode_run = 0
let g:pymode_trim_whitespaces = 0
let g:pymode_rope = 0
let g:pymode_options_max_line_length = 150
let g:pymode_lint_options_pylint = {'max-line-length': g:pymode_options_max_line_length}

" syntax highlight
let g:pymode_syntax = 1
let g:pymode_syntax_slow_sync = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_print_as_function = g:pymode_syntax_all
let g:pymode_syntax_highlight_async_await = g:pymode_syntax_all
let g:pymode_syntax_highlight_equal_operator = g:pymode_syntax_all
let g:pymode_syntax_highlight_stars_operator = g:pymode_syntax_all
let g:pymode_syntax_highlight_self = g:pymode_syntax_all
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_string_formatting = g:pymode_syntax_all
"let g:pymode_syntax_space_errors = g:pymode_syntax_all
let g:pymode_syntax_string_format = g:pymode_syntax_all
let g:pymode_syntax_string_templates = g:pymode_syntax_all
let g:pymode_syntax_doctests = g:pymode_syntax_all
let g:pymode_syntax_builtin_objs = g:pymode_syntax_all
let g:pymode_syntax_builtin_types = g:pymode_syntax_all
let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all
let g:pymode_syntax_docstrings = g:pymode_syntax_all

"let g:autopep8_max_line_length = 100
"let g:autopep8_indent_size = 2
"let g:autopep8_on_save = 1

"let g:gitgutter_enabled = 1

"Ctrl-b to open tagbar
map <C-b> :TagbarToggle<CR>

let g:tagbar_autofocus = 0
let g:tagbar_width = 40
let g:tagbar_compact = 1

"Automatically open tagbar when opening a file
"autocmd VimEnter * nested :TagbarOpen

let g:fileheader_auto_add = 0
let g:fileheader_auto_update = 0
let g:fileheader_author = 'Rebecca Donohoe'
let g:fileheader_by_git_config = 0

let g:highlightedyank_highlight_duration = 1000

let g:tmpl_search_path = ['~/.vim/templates']
let g:tmpl_author_name = 'Rebecca Donohoe'
"let g:tmpl_author_email = 'rebecca.l.donohoe@lmco.com'

"for ripgrep
"if executable('rg')
	"set grepprg=rg\ -i\ --vimgrep
"endif

"keymappings
"makes Ctrl-c and Ctrl-v work
"vmap <C-c> "+yi
"imap <C-v> <esc>"+gpi


"Removes highlight of your last search using Ctrl+n
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>
inoremap <C-n> :nohl<CR>

"Mapping for undotree
nnoremap <F7> :UndotreeToggle<CR>


"mapping for :Bclose (closes buffer without closing window)
map <F6> :Bclose<CR>

"switching between tabs
"map <C-t><up> :tabr<cr>
"map <C-t><down> :tabl<cr>
"map <C-a><left> :bnext<cr>
"map <C-s><right> :bprevious<cr>

nnoremap <F5> :buffers<CR>:buffer<Space>

"Easier movement of code blocks
"In visual mode, select several lines of code and then press '>' several times
"vnoremap < <gv
"vnoremap > >gv

augroup sourcing
  autocmd!
  autocmd bufwritepost .vimrc source $MYVIMRC
augroup END

" For git blame - must push the map to vimrc to avoid conflicts with other plugins
" nnoremap <Leader>s :<C-u>call gitblame#echo()<CR>
