set nocompatible

filetype plugin on
filetype plugin indent on

set encoding=UTF-8
scriptencoding utf-8
setglobal fileencoding=utf-8

"Use unix as the standard file type
set fileformats=unix,dos,mac
"When wrapping paragraphs, don't end lines with 1-letter words
set formatoptions+=1

set mouse=a
set autoread
set updatetime=100

set cmdheight=4
set number
set wrap
set textwidth=100
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set copyindent
set smartindent
set smarttab
set expandtab

set nobackup
set noswapfile
set nowb

"Display incomplete commands
set showcmd

set incsearch
set hlsearch
set smartcase
set ignorecase

set esckeys
set foldenable
"more characters will be sent to the screen for redrawing
set ttyfast
set scrolloff=5
set title
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.

" Syntax enable allows you to keep your current color settings, syntax on causes vim to
" overrule custom color settings with the defaults
"syntax on
syntax enable
set background=dark

set history=999
set undolevels=999

"time waited for key press(es) to complete
set timeout timeoutlen=1000 ttimeoutlen=50

set lazyredraw

"tab completion
set wildmenu
set wildmode=longest:full,list
set wildignore+=*.o,*~,*.pyc,*/tmp/*,*/target/*,*.class,*.swp,*/.git/*,*.swo,*.so,*.a,*.obj,*.exe,*.dll,*.manifest,*.eggs/**,*.egg-info/**,.git

"Vim has to be compiled with clipboard - check vim --version and see
set clipboard+=unnamedplus

"Disable for security reasons
set nomodeline
set showmatch
set backspace=2
set backspace=indent,eol,start
"Disable annoying error sounds
set noerrorbells
set visualbell
set t_vb=

"hide mouse while typing
set mousehide
set showbreak=>\

"hide buffers instead of closing them even if they contain unwritten changes
set hidden

"Disable all the vim messages
set shortmess=fotxI

"allows the terminal to use more colors
if('gui_running')
	set t_Co=256
endif

"----------------------------------------------------------------
" If you want to have a statusline
" Adjust colors as desired 
"----------------------------------------------------------------
set laststatus=2

" status bar colors
au InsertEnter * hi statusline guifg=black guibg=#d7afff ctermfg=black ctermbg=magenta
au InsertLeave * hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan
hi statusline guifg=black guibg=#8fbfdc ctermfg=black ctermbg=cyan

" Status line
" default: set statusline=%f\ %h%w%m%r\ %=%(%l,%c%V\ %=\ %P%)

" Status Line Custom
let g:currentmode={
    \ 'n'  : 'Normal',
    \ 'no' : 'Normal·Operator Pending',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ '^V' : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ '^S' : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

set laststatus=2
set noshowmode
set statusline=
set statusline+=%0*\ %n\                                 " Buffer number
set statusline+=%1*\ %<%F%m%r%h%w\                       " File path, modified, readonly, helpfile, preview
set statusline+=%3*│                                     " Separator
set statusline+=%2*\ %Y\                                 " FileType
set statusline+=%3*│                                     " Separator
set statusline+=%2*\ %{''.(&fenc!=''?&fenc:&enc).''}     " Encoding
set statusline+=\ (%{&ff})                               " FileFormat (dos/unix..)
set statusline+=%=                                       " Right Side
set statusline+=%2*\ col:\ %02v\                         " Colomn number
set statusline+=%3*│                                     " Separator
set statusline+=%1*\ ln:\ %02l/%L\ (%3p%%)\              " Line number / total lines, percentage of document
set statusline+=%0*\ %{toupper(g:currentmode[mode()])}\  " The current mode

hi User1 ctermfg=007 ctermbg=239 guibg=#4e4e4e guifg=#adadad
hi User2 ctermfg=007 ctermbg=236 guibg=#303030 guifg=#adadad
hi User3 ctermfg=236 ctermbg=236 guibg=#303030 guifg=#303030
hi User4 ctermfg=239 ctermbg=239 guibg=#4e4e4e guifg=#4e4e4e


"Allows for redo/undo from previous sessions
if has('persistent_undo')
	silent !mkdir ~/.vim/backups > /dev/null 2>&1
	set undodir=~/.vim/backups
set undofile
endif

"Returns to previous edit point when opened
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"Save as sudo when not opened as sudo
cmap w!! w !sudo tee % >/dev/null

"Disable automatic commenting on newline
augroup commenting
	au!
	au FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END

"tells vim to associate these filetypes with a specific filetype
augroup files
	au!
	au BufRead,BufNewFile *.h set filetype=c
	au BufRead,BufNewFile *.hh set filetype=c
	au BufRead,BufNewFile *.cc set filetype=c
augroup END

"vim detects filetype upon opening and sets defined spaces/tabs below
augroup vimrc_file_type_indentation
	au!
	autocmd FileType python setlocal shiftwidth=2 tabstop=2 expandtab
	autocmd FileType vim setlocal shiftwidth=2 tabstop=2 expandtab
	autocmd FileType sh setlocal shiftwidth=2 tabstop=2 expandtab
	autocmd FileType c setlocal shiftwidth=4 tabstop=4 expandtab
	autocmd FileType cpp setlocal shiftwidth=4 tabstop=4 expandtab
	autocmd FileType java setlocal shiftwidth=4 tabstop=4 expandtab
augroup END

"------------------------------------------------------------------
"Better mouse functionality between vim and terminal (i.e., better
"copying and pasting between the two
"------------------------------------------------------------------
if exists("b:loaded_toggle_mouse_plugin")
	finish
endif
let b:loaded_toggle_mouse_plugin = 1

fun! s:ToggleMouse()
	if !exists("s:old_mouse")
		let s:old_mouse = "a"
	endif

	if &mouse == ""
		let &mouse = s:old_mouse
		echo "Mouse is for vim (" . &mouse .")"
	else
		let s:old_mouse = &mouse
		let &mouse=""
		echo "Mouse is for terminal"
	endif
endfunction

if !exists("no_plugin_maps") && !exists("no_toggle_mouse_maps")
	if !hasmapto('<SID>ToggleMouse()')
		noremap <F12> :call <SID>ToggleMouse()<CR>
		inoremap <F12> <ESC>:call <SID>ToggleMouse<CR>a
	endif
endif

"Automatically source .vimrc when saved
augroup sourcing
	autocmd!
	autocmd bufwritepost .vimrc source $MYVIMRC
augroup END
